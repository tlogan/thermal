(*


  fun fnc_equal (f1, f2) = (let
    (* **TODO** *)  
  in
    f1 = f2
  end)

  fun term_equal (t1, t2) = (let
    (* **TODO** *)  
  in
    t1 = t2 
  end)



  fun normalize_single_pop (
    t, f, 
    val_store, cont_stack, thread_id,
    chan_store, block_store, sync_store, cnt
  ) = reduce_single (
    t, f, 
    val_store, cont_stack, thread_id,
    chan_store, block_store, sync_store, cnt,
    (fn v => pop (
      (f v),
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt
    ))
  )



  fun normalize_pair_pop (
    (t1, t2), f, 
    val_store, cont_stack, thread_id,
    chan_store, block_store, sync_store, cnt
  ) = normalize_pair_reduce (
    (t1, t2), f, 
    val_store, cont_stack, thread_id,
    chan_store, block_store, sync_store, cnt,
    (fn (v1, v2) => pop (
      (f (v1, v2)),
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt
    ))
  )



  fun mk_prop (result_id, lams) = (let

    val var = Id (result_id, ~1)
    val prop_cases = (List.foldl
      (fn ((t, b), prop_cases_acc) => (case prop_cases_acc of
        [] => [(
          Equal (var, t, ~1),
          [],
          b
        )] |
        (curr, prevs, _) :: _ => (
          prop_cases_acc @ [(
            Equal (var, t, ~1),
            prevs @ [curr],
            b
          )]
        )
      ))
      []
      lams
    )

    val mk_or_clause = (List.foldl
      (fn (cl, or_cl) =>
        Or (or_cl, cl, ~1)
      )
      (Bool (false, ~1))
    )
    

    val case_clauses = (List.map
      (fn (curr_cl, prev_cls, b) =>
        And (curr_cl, (Not (mk_or_clause prev_cls, ~1)), ~1)
      )
      prop_cases
    )

    val mk_and_clause = (List.foldl
      (fn (cl, and_cl) =>
        And (and_cl, cl, ~1)
      )
      (Bool (true, ~1))
    )

  in
    mk_and_clause case_clauses
  end)

  fun backchain (
    goals, monitee_thread_id, env,
    val_store, cont_stack, thread_id,
    chan_store, block_store, sync_store, cnt
  ) = (case goals of
    (*
    [] => (let
      (* simp = resolve as much as possible *)
      val simp_term = simp (result_id, env)

      val free_vars = extract_free_vars simp_term
      val result_msg = if null free_vars then
        Sol_Val result_msg
      else
        Sol_Abs (Fnc ([
          (Lst (free_vars, ~1), result_msg)
        ], (fn id => NONE), [], ~1), ~1)

      val sync_send = Sync (Send (Lst [
        ChanId return_chan_id,
        result_msg 
      ], ~1, ~1))
    in
      (
        Mode_Upkeep,
        [(sync_send, val_store, cont_stack, thread_id)],
        (chan_store, block_store, sync_store, cnt)
      )
    end)
    *)
    (* **TODO** *)
    _ => (
      Mode_Stick "TODO",
      [], (chan_store, block_store, sync_store, cnt)
    )
  )






*)
(*
    Equiv (t1, t2, pos) => normalize_pair_reduce (
      (t1, t2), fn (t1, t2) => Equiv (t1, t2, pos),
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt,
      (fn
        (Bool (b1, _), Bool (b2, _)) => pop (
          Bool (b1 = b2, pos),
          val_store, cont_stack, thread_id,
          chan_store, block_store, sync_store, cnt
        ) |

        _ => (
          Mode_Stick "<-> with non-boolean",
          [], (chan_store, block_store, sync_store, cnt)
        )
      )

    ) |

    Implies (t1, t2, pos) => normalize_pair_reduce (
      (t1, t2), fn (t1, t2) => Implies (t1, t2, pos),
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt,
      (fn
        (Bool (b1, _), Bool (b2, _)) => pop (
          Bool (not b1 orelse b2, pos),
          val_store, cont_stack, thread_id,
          chan_store, block_store, sync_store, cnt
        ) |

        _ => (
          Mode_Stick "--> with non-boolean",
          [], (chan_store, block_store, sync_store, cnt)
        )
      )

    ) |

    Or (t1, t2, pos) => normalize_pair_reduce (
      (t1, t2), fn (t1, t2) => Or (t1, t2, pos),
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt,
      (fn
        (Bool (b1, _), Bool (b2, _)) => pop (
          Bool (b1 orelse b2, pos),
          val_store, cont_stack, thread_id,
          chan_store, block_store, sync_store, cnt
        ) |

        _ => (
          Mode_Stick "\\/ with non-boolean",
          [], (chan_store, block_store, sync_store, cnt)
        )
      )

    ) |

    And (t1, t2, pos) => normalize_pair_reduce (
      (t1, t2), fn (t1, t2) => And (t1, t2, pos),
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt,
      (fn
        (Bool (b1, _), Bool (b2, _)) => pop (
          Bool (b1 andalso b2, pos),
          val_store, cont_stack, thread_id,
          chan_store, block_store, sync_store, cnt
        ) |

        _ => (
          Mode_Stick "/\\ with non-boolean",
          [], (chan_store, block_store, sync_store, cnt)
        )
      )

    ) |

    Equal (t1, t2, pos) => normalize_pair_reduce (
      (t1, t2), fn (t1, t2) => Equal (t1, t2, pos),
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt,
      (fn

        (v1, v2) => pop (
          Bool (term_equal (v1, v2), pos),
          val_store, cont_stack, thread_id,
          chan_store, block_store, sync_store, cnt
        )

      )

    ) |


    Solve (t, pos) => reduce_single (
      t, fn v => Solve (v, pos),  
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt,
      (fn
        Fnc (lams, fnc_store, mutual_store, pos_f) => (let
          val chan_id = cnt
          val chan_store' = insert (chan_store, chan_id, ([], []))
          val thread_id' = cnt + 1
          val cnt' = cnt + 2 

          val env = empty_table
          val result_id = sym cnt' 
          val cnt'' = cnt' + 1

          val bkchn_id = cnt''
          val cnt''' = cnt'' + 1

          val sync_store' = insert (sync_store, (thread_id, bkchn_id), [])

          val prop = mk_prop (result_id, lams)

        in
          (
            Mode_Reduce (ChanId cnt),
            [(
              Backchain ([prop], thread_id, env),
              val_store, [], thread_id'
            )],
            (chan_store, block_store, sync_store', cnt''')
          )
        end) |

        _ => (
          Mode_Stick "solve with non-predicate",
          [], (chan_store, block_store, sync_store, cnt)
        )
      ) 
    ) |

    For (t, pos) => (let
      val empty_term = (
        Not (Equal (
          Solution Sol_Empty,
          Solve (t, pos),
          ~1
        ), ~1)
      )
    in
      (
        Mode_Upkeep,
        [(empty_term, val_store, cont_stack, thread_id)],
        (chan_store, block_store, sync_store, cnt)
      )
    end) |

    Not (t, pos) => reduce_single (
      t, fn v => Not (v, pos),
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt,
      (fn
        Bool (b, _) => pop (
          Bool (not b, pos),
          val_store, cont_stack, thread_id,
          chan_store, block_store, sync_store, cnt
        ) |

        _ => (
          Mode_Stick "~ with non-boolean",
          [], (chan_store, block_store, sync_store, cnt)
        )
      )

    ) |

    Synced (t, pos) => reduce_single (
      t, fn v => Synced (v, pos), 
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt,
      (fn
        Fnc (lams, fnc_store, mutual_store, _) => (case md of
          Mode_Sync (chan_id, msg, send_id, recv_id) => (
            if (send_id = thread_id) then (
              push (
                (
                  Send (Lst ([ChanId chan_id, msg], ~1), ~1),
                  (lams, fnc_store, mutual_store)
                ),
                val_store, cont_stack, thread_id,
                chan_store, block_store, sync_store, cnt
              )
              

            ) else if (recv_id = thread_id) then (
              push (
                (
                  Recv (Lst ([ChanId chan_id, msg], ~1), ~1),
                  (lams, fnc_store, mutual_store)
                ),
                val_store, cont_stack, thread_id,
                chan_store, block_store, sync_store, cnt
              )

            ) else (
              pop (
                Bool (false, pos),
                val_store, cont_stack, thread_id,
                chan_store, block_store, sync_store, cnt
              )

            )
          ) |

          _ => pop (
            Bool (false, pos),
            val_store, cont_stack, thread_id,
            chan_store, block_store, sync_store, cnt
          )

        ) | 

        _ => (
          Mode_Stick "synced with non-predicate",
          [], (chan_store, block_store, sync_store, cnt)
        )
      )
    ) | 


    Blank pos => (
      Mode_Stick "_ in non-pattern",
      [], (chan_store, block_store, sync_store, cnt)
    ) |

    Bool (b, pos) => pop (
      Bool (b, pos),
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt
    ) |

    Id (str, pos) => pop (
      Id (str, pos),
      val_store, cont_stack, thread_id,
      chan_store, block_store, sync_store, cnt
    ) |


    Backchain (goals, monitee_thread_id, env) => (
      backchain (
        goals, monitee_thread_id, env,
        val_store, cont_stack, thread_id,
        chan_store, block_store, sync_store, cnt
      )
    ) |

*)
